// Code your design here
`timescale 1ns / 1ps



 
module TopLevelModule(clk, red, green, blue, h_sync, v_sync);
input clk;
output [3:0]red;
output [3:0]green;
output [3:0]blue;
output h_sync;
output v_sync;
 
wire M1,M3,M7;
wire [9:0] M2, M4,M8,M9;
 
clk_div a1(clk,M1);
h_counter a2(M1,M2,M3);
v_counter a3(M1,M3, M4);
vga_sync a4(M2, M4, h_sync, v_sync, M7,M8,M9);
pixel_gen a5(M1, M8, M9, M7, red, green, blue);
endmodule
 
module vga_sync(h_count, v_count, h_sync, v_sync, video_on, x_loc, y_loc);
input [9:0] h_count;
input [9:0] v_count;
output h_sync;
output v_sync;
output video_on;
output [9:0] x_loc;
output [9:0] y_loc;
 
//horizontal
localparam HD = 640;
localparam HF = 48;
localparam HB = 16;
localparam HR = 96;
 
//vertical
localparam VD = 480;
localparam VF = 10;
localparam VB = 33;
localparam VR = 2;
 

  assign h_sync = ((h_count < (HD+HF)) || (h_count >= (HD+HF+HR)));

  
  assign v_sync = ((v_count < (VD+VF)) || (v_count >= (VD+VF+VR)));

  
  assign video_on = ((h_count < HD) && (v_count < VD));

  
  
  assign x_loc = h_count; 
  assign y_loc = v_count; 
  
endmodule

module startup(pixel_x, pixel_y, squad);
  input [9:0] pixel_x;
  input [9:0] pixel_y;
  output squad;
  
  reg [0:29] startup [29:0];
  
  wire [5:0] x = pixel_x[9:4] - 5;
  wire [5:0] y = pixel_y[9:4];
  assign squad = startup[y][x];
  
  initial begin
    startup[0]  = 30'b111111111111111111111111111111; 
    startup[1]  = 30'b100000000000000000000000000001; 
    startup[2]  = 30'b100000000000000000000000000001; 
    startup[3]  = 30'b100000000000000000000001111001; 
    startup[4]  = 30'b100000000000001010010000000001; 
    startup[5]  = 30'b100000000000000000000001111001; 
    startup[6]  = 30'b100000000000010001001001000001; 
    startup[7]  = 30'b100000000011111111111111000001; 
    startup[8]  = 30'b100100000010000000000000000001; 
    startup[9]  = 30'b100100111110000000000000000001; 
    startup[10] = 30'b100100100000000000000000000001; 
    startup[11] = 30'b100100111110000000000000000001; 
    startup[12] = 30'b100100000010000000000000000001; 
    startup[13] = 30'b100111111110000000000000000001; 
    startup[14] = 30'b100000000000000000000000000001;
    startup[15] = 30'b100000000000000000000000000001;
    startup[16] = 30'b100100011101110111010010100001; 
    startup[17] = 30'b100100010001010101011010100001; 
    startup[18] = 30'b100100010001110111010110100001; 
    startup[19] = 30'b100100010001010110010010100001; 
    startup[20] = 30'b100111011101010101010010111001; 
    startup[21] = 30'b100000000000000000000000000001; 
    startup[22] = 30'b100001110111011101110011100001; 
    startup[23] = 30'b100000100100010000100001000001;
    startup[24] = 30'b100000100111011100100001000001; 
    startup[25] = 30'b100000100100000100100001000001; 
    startup[26] = 30'b100000100111011100100001000001; 
    startup[27] = 30'b100000000000000000000000000001; 
    startup[28] = 30'b100000000000000000000000000001; 
    startup[29] = 30'b111111111111111111111111111111; 
  end
endmodule
 module maze(pixel_x, pixel_y, flag);
  input [9:0] pixel_x;
  input [9:0] pixel_y;
  output flag;
  
  reg [0:29] m [29:0];
  
  wire [5:0] x = pixel_x[9:4] - 5;
  wire [5:0] y = pixel_y[9:4];
  assign flag = m[y][x];
  
  initial begin
    m[0]  = 30'b000000000000000000000000000000;
    m[1]  = 30'b111111111100000000001111111111;
    m[2]  = 30'b000000000000000000000000000000;
    m[3]  = 30'b000000000000000000000000111111;
    m[4]  = 30'b000000001000000000000000100000;
    m[5]  = 30'b111111111000000000000000100000;
    m[6]  = 30'b000000000000000000000000000000;
    m[7]  = 30'b000000000000100000000000000000;
    m[8]  = 30'b000000000000111111111110000000;
    m[9]  = 30'b010000001111100000000000000000;
    m[10] = 30'b000000000000100000000000000000;
    m[11] = 30'b111110001111100000000000011111;
    m[12] = 30'b000000000000000000000000000000;
    m[13] = 30'b111111000000000000000000000000;
    m[14] = 30'b000000000000000000100000000000;
    m[15] = 30'b000000000000000000100000000000;
    m[16] = 30'b000000000000011111111000000000;
    m[17] = 30'b000000000000010000000000000000;
    m[18] = 30'b000000000000010000000000000000;
    m[19] = 30'b111100000000010000000000000010;
    m[20] = 30'b000000000000010000000000000010;
    m[21] = 30'b000000000000000000000000000010;
    m[22] = 30'b000000000000000000000000000010;
    m[23] = 30'b011111000000000000000011111110;
    m[24] = 30'b010000000000000000000000000000;
    m[25] = 30'b010000000111111100000000000000;
    m[26] = 30'b010000000000000000000000000000;
    m[27] = 30'b010000000000011110000001110000;
    m[28] = 30'b000000000000000000000000000000;
    m[29] = 30'b000000000000000000000000000000;  
  end
endmodule
 
 module finish(pixel_x, pixel_y, flag);
  input [9:0] pixel_x;
  input [9:0] pixel_y;
  output flag;
  
  reg [0:19] finish_arr [19:0];
  
   assign flag = (((312 <= pixel_x) && (pixel_x< 312 + 20)) && ((10 <= pixel_y) && (pixel_y < 10 + 20))) ? (finish_arr[pixel_y - 10][pixel_x - 312]):0;
  initial begin                                      
      finish_arr[0]  = 19'b0000000000000000000;   
      finish_arr[1]  = 19'b0000000000000000000;   
      finish_arr[2]  = 19'b1111111111111111100;   
      finish_arr[3]  = 19'b1110000000000000100;  
      finish_arr[4]  = 19'b1110011111111000100;   
      finish_arr[5]  = 19'b1110010000001000100;   
      finish_arr[6]  = 19'b1110010000001000100;   
      finish_arr[7]  = 19'b1110011111111000100;   
      finish_arr[8]  = 19'b1110000000000000100;   
      finish_arr[9]  = 19'b1110000000000000100;   
      finish_arr[10] = 19'b1111111111111111100;   
      finish_arr[11] = 19'b1110000000000000000;   
      finish_arr[12] = 19'b1110000000000000000;   
      finish_arr[13] = 19'b1110000000000000000;   
      finish_arr[14] = 19'b1110000000000000000;   
      finish_arr[15] = 19'b1110000000000000000;
      finish_arr[16] = 19'b1110000000000000000;  
      finish_arr[17] = 19'b0000000000000000000;  
      finish_arr[18] = 19'b0000000000000000000;  
      finish_arr[19] = 19'b0000000000000000000;     
  end                                                
endmodule
 
 
 
 
module player(pixel_x, pixel_y, flag);
  input [9:0] pixel_x;
  input [9:0] pixel_y;
  output flag;
  
  reg [0:29] m [29:0];
  
   assign flag = (((210 <= pixel_x) && (pixel_x< 210 + 30)) && ((450 <= pixel_y) && (pixel_y < 450 + 30))) ? (m[pixel_y - 450][pixel_x - 210]):0;
  
  initial begin
    m[0]  = 30'b000000000000000000000000000000;
    m[1]  = 30'b000000000000000000000000000000;
    m[2]  = 30'b000000000000000000000000000000;
    m[3]  = 30'b000000000000000000000000000000;
    m[4]  = 30'b000000000000000000000000000000;
    m[5]  = 30'b000000000000000000000000000000;
    m[6]  = 30'b000000111111111111111111000000;
    m[7]  = 30'b000001111111111111111111100000;
    m[8]  = 30'b000011111111111111111111110000;
    m[9]  = 30'b001111111111111111111111111100;
    m[10] = 30'b001111111111111111111111111100;
    m[11] = 30'b001111111111111111111111111100;
    m[12] = 30'b001111111111111111111111111100;
    m[13] = 30'b001111111111111111111111111100;
    m[14] = 30'b001111111110010010011111111100;
    m[15] = 30'b000011000000010010000000110000;
    m[16] = 30'b000011000000000000000000110000;
    m[17] = 30'b000011000000000000000000110000;
    m[18] = 30'b000011110000000000000011110000;
    m[19] = 30'b000000010000000000000010000000;
    m[20] = 30'b000000011000000000000110000000;
    m[21] = 30'b000000001000000000000100000000;
    m[22] = 30'b000000001100000000001100000000;
    m[23] = 30'b000000000111111111111000000000;
    m[24] = 30'b000000000000000000000000000000;
    m[25] = 30'b000000000000000000000000000000;
    m[26] = 30'b000000000000000000000000000000;
    m[27] = 30'b000000000000000000000000000000;
    m[28] = 30'b000000000000000000000000000000;
    m[29] = 30'b000000000000000000000000000000;  
  end
endmodule
 
 
module pixel_gen( 
  input clk_d, // pixel clock 
  input [9:0] pixel_x, 
  input [9:0] pixel_y, 
  input video_on, 
  output reg [3:0] red=0, 
  output reg [3:0] green=0, 
  output reg [3:0] blue=0
  //input [3:0] keys_1,
  //input [3:0] keys_2,
  //input fire_1,
  //input fire_2,
  //input startgame,
  //input restart
);
  parameter start = 0;
  parameter game = 1;
  //parameter p1 = 2;
  //parameter p2 = 3;
  //reg animate;
  //reg p1wincheck;
  //reg p2wincheck;
  //reg reset = 1;
  //reg [10:0] counter;
  
  reg [1:0] state = start;
  wire s1_pix;
  startup s1(pixel_x, pixel_y, s1_pix);
  //wire p1_pix;
  //p1screen p1x(pixel_x, pixel_y, p1_pix);
  //wire p2_pix;
  //p2screen p2x(pixel_x, pixel_y, p2_pix);
  wire maze_pix;
  maze m1(pixel_x, pixel_y, maze_pix);
  
  wire player_pix;
  player p1(pixel_x, pixel_y, player_pix);
  wire finish_pix;
  //wire JAM;
  finish f1(pixel_x, pixel_y, finish_pix);
  
  
  
  //wire tank_pix_1;
  //wire fire_pix_1;
  //wire tank_pix_2;
  //wire fire_pix_2;
  //tank1 t1(clk_d, pixel_x, pixel_y, tank_pix_1, fire_pix_1, keys_1, fire_1, reset, maze_pix || crown_pix || tank_pix_2);
  //tank2 t2(clk_d, pixel_x, pixel_y, tank_pix_2, fire_pix_2, keys_2, fire_2, reset, maze_pix || crown_pix || tank_pix_1);
 
  //assign y_pos_1 = (pixel_x == 640&&pixel_y==480)? ((keys == 1)? (y_pos_1 + 1) : y_pos) : y_pos;
  //fire1 t2(clk_d, pixel_x, pixel_y, tank_pix_2, keys_2);
  //always @(posedge clk_d) begin
    //if ((tank_pix_2 == 1 && fire_pix_1 == 1) || (tank_pix_1 == 1 && crown_pix == 1 && counter >= 600)) p1wincheck = 1;
    //if (tank_pix_1 == 1 && fire_pix_2 == 1 || (tank_pix_2 == 1 && crown_pix == 1 && counter >= 600)) p2wincheck = 1;
    //if (pixel_y == 481 && pixel_x == 0) begin
      //  p1wincheck = 0;
      //  p2wincheck = 0;
    //end
    //animate <= (pixel_y == 480 && pixel_x == 0); 
  //end
  /*always @(posedge animate) begin
    if (counter < 750) counter = counter + 1;
    else counter = 0;
    if (state == start && startgame == 1) begin
        state = game;
        reset = 0;
        counter = 0;
    end
    else if ((state == p1 || state == p2) && restart == 1) begin
        state = start; 
        reset = 1;
    end
    else if (p1wincheck == 1 && state == game) state = p1; 
    else if (p2wincheck == 1 && state == game) state = p2; 
  end*/
  
  always @(posedge clk_d)
    begin
      if ((pixel_x <80) || (pixel_x >=560)) begin 
        red <= 4'h0; 
        green <= 4'h0; 
        blue <= 4'h0; 
      end
//      else if (pixel_x == 0) begin
//        red <= 4'h1; 
//        green <= 4'h1; 
//        blue <= 4'h1; 
//      end
      else begin
          if (state == start) begin
            if (s1_pix) begin
                red <= 4'hF; 
                green <= 4'hF; 
                blue <= 4'h0; // yellow
            end
            else begin
                red <= 4'hd;    
                green <=4'hd;
                blue <= 4'he; // kinda white
            end
          end  
          else if (state == game) begin     
              if (maze_pix == 1) begin 
                red <= 4'hd;
                green <= 4'hd; 
                blue <= 4'he; 
              end     
              else if (player_pix == 1) begin 
                red <= 4'hf;
                green <= 4'h0; 
                blue <= 4'h0; 
              end 
              /*else if (tank_pix_1 == 1 || fire_pix_1 == 1) begin
                red <= 4'hd; 
                green <= 4'h2; 
                blue <= 4'h2;
              end
              else if (tank_pix_2 == 1 || fire_pix_2 == 1) begin
                red <= 4'hf; 
                green <= 4'h7; 
                blue <= 4'h0;
              end*/
              else if (finish_pix == 1) begin
                red <= 4'he; 
                green <= 4'hc; 
                blue <= 4'h0;
              end
              /*else if (JAM == 1 && counter >= 600) begin
                red <= 4'he; 
                green <= 4'h0; 
                blue <= 4'h0;
              end*/
              else
                begin
                red <= 4'h0;
                green <=4'h3;
                blue <= 4'h5;
              end
          end
          /*else if (state == p1) begin
            if (p1_pix == 1) begin
                red <= 4'hd; 
                green <= 4'h2; 
                blue <= 4'h2;
            end
            else begin
                red <= 4'hd;
                green <=4'hd;
                blue <= 4'he;
            end
          end
          else if (state == p2) begin
            if (p2_pix == 1) begin
                red <= 4'hf; 
                green <= 4'h7; 
                blue <= 4'h0;
            end
            else begin
                red <= 4'hd;
                green <=4'hd;
                blue <= 4'he;
            end
          end*/
      end
     end 
endmodule

 
module h_counter(clk,h_count,trig_v);
input clk;
output [9:0] h_count;
reg [9:0] h_count;
output trig_v;
reg trig_v;
initial h_count = 0;
initial trig_v = 0;
 
always @ (posedge clk)
begin
if (h_count <= 798)
begin
h_count <= h_count +1;
trig_v <= 0;
end
else
begin
h_count <= 0;
trig_v <= 1;
end
end
endmodule
 
module v_counter(clk,enable_v, v_count);
input clk;
input enable_v;
output [9:0] v_count;
reg [9:0] v_count;
initial v_count = 0;
 
always @ (posedge clk)
begin
if (enable_v ==1)
begin
if (v_count <= 523)
begin
v_count <= v_count + 1;
end
else
begin
v_count <= 0;
end
end
end
endmodule
 
module clk_div (clk, clk_d);
parameter div_value = 1;
input clk;
output clk_d;
 
reg clk_d;
reg count;
 
initial
begin
clk_d = 0;
count = 0;
end
always @(posedge clk)
begin
if (count == div_value)
count <= 0; // reset count
else
count <= count + 1; //count up
end
always @(posedge clk)
begin
if (count == div_value)
clk_d <= ~clk_d; //toggle
end
endmodule